setwd("~/OneDrive - UNC-Wilmington/Warner_lab/Github_repos/Spiralbase_VLM_tutorial")
install.packages("tidyverse")
knitr::opts_chunk$set(echo = TRUE)
fischer_data <- read.table(url("https://raw.githubusercontent.com/ScientistJake/Spiralbase_VLM_tutorial/main/data/Fischer_normalized_cpm.txt"), header = T, quote = "")
warner_data <- read.table(url("https://raw.githubusercontent.com/ScientistJake/Spiralbase_VLM_tutorial/main/data/Warner_normalized_cpm.txt"), header = T, quote = "")
fischer_data_Log2 = log(fischer_data+1,2)
warner_data_Log2 = log(warner_data+1,2)
library(ggplot2)
library(tidyverse)
warner_rep <- factor(c(1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2))
warner_time <- factor(c("24hpa","24hpa","48hpa","48hpa","72hpa","72hpa","96hpa","96hpa","120hpa","120hpa","144hpa","144hpa","168hpa","168hpa","192hpa","192hpa"))
warner_PCA_data <- warner_data_Log2 %>%
t() %>% #this puts samples as rows, genes as columns
as.data.frame() %>%
prcomp()
warner_scores_to_plot <- as.data.frame(warner_PCA_data$x)
ggplot(data = warner_scores_to_plot,
aes(x = PC1, y = PC2,
label = rownames(warner_scores_to_plot),
colour=factor(warner_time),
shape=factor(warner_rep)
)
) +
geom_point(size=3) +
scale_fill_hue(l=40) +
coord_fixed(ratio=1, xlim=range(warner_scores_to_plot$PC1), ylim=range(warner_scores_to_plot$PC2))
fischer_rep <- factor(c(1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2))
fischer_time <- factor(c("12hpa","12hpa","13hpa","13hpa","14hpa","14hpa","15hpa","15hpa","16hpa","16hpa","17hpa","17hpa","18hpa","18hpa","19hpa","19hpa"))
fischer_PCA_data <- fischer_data_Log2 %>%
t() %>% #this puts samples as rows, genes as columns
as.data.frame() %>%
prcomp()
fischer_scores_to_plot <- as.data.frame(fischer_PCA_data$x)
ggplot(data = fischer_scores_to_plot,
aes(x = PC1, y = PC2,
label = rownames(fischer_scores_to_plot),
colour=factor(fischer_time),
shape=factor(fischer_rep)
)
) +
geom_point(size=3) +
scale_fill_hue(l=40) +
coord_fixed(ratio=1, xlim=range(fischer_scores_to_plot$PC1), ylim=range(fischer_scores_to_plot$PC2))
rm(list = ls())
gc()
library(WGCNA)
warner_WGNCA_data <- read.table(url("https://raw.githubusercontent.com/ScientistJake/Spiralbase_VLM_tutorial/main/data/Warner_normalized_cpm.txt"), header = T, quote = "") %>%
mutate_all(function(x) log(x+1,2)) %>%
t()
#Need to pick soft powers. This takes a while
##Start with Fischer data
powers = c(c(1:10), seq(from = 12, to=40, by=2))
disableWGCNAThreads()
sft = pickSoftThreshold(warner_WGNCA_data, powerVector = powers, verbose = 5, networkType = "signed")
sft$powerEstimate
{cex1 = 0.9;
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.80,col="red")
plot(sft$fitIndices[,1], sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
}
{cex1 = 0.9;
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.80,col="red")
plot(sft$fitIndices[,1], sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
}
softPower = 20 # (Read WGCNA tutorial to learn how to pick your power)
rankExpr = rank(colMeans(warner_WGNCA_data))
rankConn = rank(softConnectivity((warner_WGNCA_data),type="signed",power=softPower))
enableWGCNAThreads()
library(flashClust)
adjacency = adjacency((warner_WGNCA_data),power=softPower,type="signed");
diag(adjacency)=0
Degree <- rowSums(adjacency)
Degree=Degree/max(Degree); gc()
dissTOM = 1-TOMsimilarity(adjacency, TOMType="signed")
geneTree = flashClust(as.dist(dissTOM), method="average")
mColor=NULL
for (ds in 0:3){
tree = cutreeHybrid(dendro = geneTree, pamStage=F, minClusterSize = (30-3*ds), deepSplit = ds, distM = dissTOM)
mColor=cbind(mColor,labels2colors(tree$labels)); }
plotDendroAndColors(geneTree, mColor, paste("dpSplt =",0:3), main = "",dendroLabels=FALSE);
modules = mColor[,1] # (Chosen based on plot below)
dynamicColors= labels2colors(modules)
#print the module sizes
table(modules)
PCs = moduleEigengenes((warner_WGNCA_data), colors=modules)
ME  = PCs$eigengenes
MEDiss= 1-cor(ME)
METree= flashClust(as.dist(MEDiss), method= "average")
MEs= orderMEs(MEs)
MEs= orderMEs(ME)
plot(METreeR, main= "Clustering of module eigengenes", xlab= "", sub= "")
plot(METree, main= "Clustering of module eigengenes", xlab= "", sub= "")
MEDissThres= 0.15
merge= mergeCloseModules(warner_WGNCA_data, modules, cutHeight= MEDissThres, verbose =3)
library(reshape)
ME_plot <- as.data.frame(t(MEs))
colnames(ME_plot) = c(24,24,48,48,72,72,96,96,120,120,144,144,168,168,192,192)
library(ggplot2)
row.names(ME_plot) <- rownames(ME_plot)
ME_plotM <- melt(as.matrix(ME_plot), id.vars="row.names", value.name="value")
co = c("MEred")
ME_plot_color <- ME_plotM[ME_plotM$X1 == paste(co),]
group <- c(1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2)
p <-  ggplot(ME_plot_color, aes(x=as.numeric(as.character(ME_plot_color$X2)), y=value, colour=paste(co), group = group)) +
geom_line(size =1.5) +
scale_x_continuous(minor_breaks = NULL, breaks=c(0,2,4,8,12,16,20,24,36,48,60,72,96,120,144)) +
ylab("Eigengene expression") +
xlab("Hours Post Amputation")
p
print(p)
rownames(warner_WGNCA_data)[1:4]
rownames(warner_WGNCA_data)
traits <- read.table(url("https://raw.githubusercontent.com/ScientistJake/Spiralbase_VLM_tutorial/main/data/warner_traits.txt"), sep='\t', header=T, quote="",row.names=1)
nGenes = ncol(warner_WGNCA_data)
nSamples = nrow(warner_WGNCA_data)
moduleTraitCor = cor(ME, traits, use = "p");
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples)
textMatrix = paste(signif(moduleTraitCor, 2), "\n(",signif(moduleTraitPvalue, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor)
library('viridis')
library(RColorBrewer)
colors = colorRampPalette(rev(brewer.pal(n = 9, name ="RdYlBu")))(200)
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = c("24hpf","48hpf","72hpf","96hpf","120hpf","148hpf","168hpf","192hpf"),
yLabels = names(ME_merged),
colorLabels = FALSE,
colors = colors,
textMatrix = textMatrix,
setStdMargins = F,
cex.text = 0.5,
zlim = c(-1,1),
verticalSeparator.x = 1:dim(moduleTraitCor)[2],
verticalSeparator.col="grey80",
horizontalSeparator.y = 1:dim(moduleTraitCor)[1],
horizontalSeparator.col="grey80",
main = paste("Module-hpf relationships")
)
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = c("24hpf","48hpf","72hpf","96hpf","120hpf","148hpf","168hpf","192hpf"),
yLabels = names(ME),
colorLabels = FALSE,
colors = colors,
textMatrix = textMatrix,
setStdMargins = F,
cex.text = 0.5,
zlim = c(-1,1),
verticalSeparator.x = 1:dim(moduleTraitCor)[2],
verticalSeparator.col="grey80",
horizontalSeparator.y = 1:dim(moduleTraitCor)[1],
horizontalSeparator.col="grey80",
main = paste("Module-hpf relationships")
)
setwd("~/OneDrive - UNC-Wilmington/Warner_lab/Github_repos/Spiralbase_VLM_tutorial")
knitr::opts_chunk$set(echo = TRUE)
library(WGCNA)
warner_WGNCA_data <- read.table(url("https://raw.githubusercontent.com/ScientistJake/Spiralbase_VLM_tutorial/main/data/Warner_normalized_cpm.txt"), header = T, quote = "") %>%
mutate_all(function(x) log(x+1,2)) %>%
t()
library(ggplot2)
library(tidyverse)
warner_WGNCA_data <- read.table(url("https://raw.githubusercontent.com/ScientistJake/Spiralbase_VLM_tutorial/main/data/Warner_normalized_cpm.txt"), header = T, quote = "") %>%
mutate_all(function(x) log(x+1,2)) %>%
t()
#Need to pick soft powers. This takes a while
##Start with Fischer data
powers = c(c(1:10), seq(from = 12, to=40, by=2))
disableWGCNAThreads()
sft = pickSoftThreshold(warner_WGNCA_data, powerVector = powers, verbose = 5, networkType = "signed")
sft$powerEstimate
{cex1 = 0.9;
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.80,col="red")
plot(sft$fitIndices[,1], sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
}
softPower = 20 # (Read WGCNA tutorial to learn how to pick your power)
rankExpr = rank(colMeans(warner_WGNCA_data))
rankConn = rank(softConnectivity((warner_WGNCA_data),type="signed",power=softPower))
enableWGCNAThreads()
library(flashClust)
adjacency = adjacency((warner_WGNCA_data),power=softPower,type="signed");
diag(adjacency)=0
Degree <- rowSums(adjacency)
Degree=Degree/max(Degree); gc()
dissTOM = 1-TOMsimilarity(adjacency, TOMType="signed")
geneTree = flashClust(as.dist(dissTOM), method="average")
mColor=NULL
for (ds in 0:3){
tree = cutreeHybrid(dendro = geneTree, pamStage=F, minClusterSize = (30-3*ds), deepSplit = ds, distM = dissTOM)
mColor=cbind(mColor,labels2colors(tree$labels)); }
plotDendroAndColors(geneTree, mColor, paste("dpSplt =",0:3), main = "",dendroLabels=FALSE);
modules = mColor[,1] # (Chosen based on plot below)
dynamicColors= labels2colors(modules)
#print the module sizes
table(modules)
PCs = moduleEigengenes((warner_WGNCA_data), colors=modules)
ME  = PCs$eigengenes
MEDiss= 1-cor(ME)
METree= flashClust(as.dist(MEDiss), method= "average")
MEs= orderMEs(ME)
plot(METree, main= "Clustering of module eigengenes", xlab= "", sub= "")
#optional merge
MEDissThres= 0.15
merge= mergeCloseModules(warner_WGNCA_data, modules, cutHeight= MEDissThres, verbose =3)
mergedColors= merge$colors
library(reshape)
ME_plot <- as.data.frame(t(MEs))
colnames(ME_plot) = c(24,24,48,48,72,72,96,96,120,120,144,144,168,168,192,192)
library(ggplot2)
row.names(ME_plot) <- rownames(ME_plot)
ME_plotM <- melt(as.matrix(ME_plot), id.vars="row.names", value.name="value")
co = c("MEred")
ME_plot_color <- ME_plotM[ME_plotM$X1 == paste(co),]
group <- c(1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2)
p <-  ggplot(ME_plot_color, aes(x=as.numeric(as.character(ME_plot_color$X2)), y=value, colour=paste(co), group = group)) +
geom_line(size =1.5) +
scale_x_continuous(minor_breaks = NULL, breaks=c(0,2,4,8,12,16,20,24,36,48,60,72,96,120,144)) +
ylab("Eigengene expression") +
xlab("Hours Post Fertilization")
# for(co in rownames(ME_plot)){
#   ME_plot_color <- ME_plotM[ME_plotM$X1 == paste(co),]
#   group <- c(1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3)
#
#   p <-  ggplot(ME_plot_color, aes(x=as.numeric(as.character(ME_plot_color$X2)), y=value, colour=paste(co), group = group)) +
#     geom_line(size =1.5) +
#     scale_x_continuous(minor_breaks = NULL, breaks=c(0,2,4,8,12,16,20,24,36,48,60,72,96,120,144)) +
#     ylab("Eigengene expression") +
#     xlab("Hours Post Amputation")
#
#   file = paste("plots/WGCNA/ME_lines_R/ME_R_", co, ".pdf", sep="")
#   pdf(file = file, width = 8, height = 6)
#   print(p)
#   dev.off()
# }
traits <- read.table(url("https://raw.githubusercontent.com/ScientistJake/Spiralbase_VLM_tutorial/main/data/warner_traits.txt"), sep='\t', header=T, quote="",row.names=1)
nGenes = ncol(warner_WGNCA_data)
nSamples = nrow(warner_WGNCA_data)
moduleTraitCor = cor(ME, traits, use = "p");
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples)
textMatrix = paste(signif(moduleTraitCor, 2), "\n(",signif(moduleTraitPvalue, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor)
library('viridis')
library(RColorBrewer)
colors = colorRampPalette(rev(brewer.pal(n = 9, name ="RdYlBu")))(200)
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = c("24hpf","48hpf","72hpf","96hpf","120hpf","148hpf","168hpf","192hpf"),
yLabels = names(ME),
colorLabels = FALSE,
colors = colors,
textMatrix = textMatrix,
setStdMargins = F,
cex.text = 0.5,
zlim = c(-1,1),
verticalSeparator.x = 1:dim(moduleTraitCor)[2],
verticalSeparator.col="grey80",
horizontalSeparator.y = 1:dim(moduleTraitCor)[1],
horizontalSeparator.col="grey80",
main = paste("Module-hpf relationships")
)
print(p)
# go for visant
TOM = TOMsimilarity(adjacency, TOMType="signed")
module = "red";
probes = colnames(datExpr)
probes = colnames(warner_WGNCA_data)
inModule = (module_colors==module);
inModule = (modules==module);
modProbes = probes[inModule];
# Select the corresponding Topological Overlap
modTOM = TOM[inModule, inModule];
dimnames(modTOM) = list(modProbes, modProbes)
#only pull IDs with valid ID
modTOM = modTOM[rownames(modTOM) %in% annotations$L_var_ID, colnames(modTOM) %in% annotations$L_var_ID]
# Export the network into an edge list file VisANT can read
vis = exportNetworkToVisANT(modTOM,file = paste("data/VisANTInput-", module, "_0.001.txt", sep=""),
weighted = TRUE,
threshold = 0.001,
#probeToGene = data.frame(annotations$New.ID, annotations$Gene.Name)
probeToGene = data.frame(annotations$L_var_ID, annotations$SPU.common_name)
)
# Export the network into an edge list file VisANT can read
vis = exportNetworkToVisANT(modTOM,file = paste("data/VisANTInput-", module, "_0.001.txt", sep=""),
weighted = TRUE,
threshold = 0.001#,
#probeToGene = data.frame(annotations$New.ID, annotations$Gene.Name)
#probeToGene = data.frame(annotations$L_var_ID, annotations$SPU.common_name)
)
write.table(vis, file= paste("data/VisANTInput-", module, "_0.001.txt", sep=""),sep='\t',row.names = F,quote=F)
# Export the network into an edge list file VisANT can read
vis = exportNetworkToVisANT(modTOM,file = paste("data/VisANTInput-", module, "_0.05.txt", sep=""),
weighted = TRUE,
threshold = 0.05
#below is helper function where you can replace the gene ID with a common name. Just pass it two vectors, one of the IDs and one of the common names
#,probeToGene = data.frame(annotations$New.ID, annotations$Gene.Name)
)
write.table(vis, file= paste("data/VisANTInput-", module, "_0.05.txt", sep=""),sep='\t',row.names = F,quote=F)
#now export just the top 250 connections
nTop = 250;
#now export just the top 250 connections
nTop = 250;
IMConn = softConnectivity(warner_WGNCA_data[, modProbes]);
top = (rank(-IMConn) <= nTop)
vis = exportNetworkToVisANT(modTOM[top, top],file = paste("data/VisANTInput-", module, "-top",nTop,".txt", sep=""),
weighted = TRUE,
threshold = 0
#,probeToGene = data.frame(annotations$L_var_ID, annotations$SPU.common_name)
)
write.table(vis, file=paste("data/VisANTInput-", module, "-top",nTop,".txt", sep=""),sep='\t',row.names = F,quote=F)
rm(list = ls())
gc()
library(WGCNA)
fischer_WGNCA_data <- read.table(url("https://raw.githubusercontent.com/ScientistJake/Spiralbase_VLM_tutorial/main/data/Fischer_normalized_cpm.txt"), header = T, quote = "") %>%
mutate_all(function(x) log(x+1,2)) %>%
t()
#Need to pick soft powers. This takes a while
powers = c(c(1:10), seq(from = 12, to=40, by=2))
disableWGCNAThreads()
sft = pickSoftThreshold(warner_WGNCA_data, powerVector = powers, verbose = 5, networkType = "signed")
sft = pickSoftThreshold(fischer_WGNCA_data, powerVector = powers, verbose = 5, networkType = "signed")
sft$powerEstimate
{cex1 = 0.9;
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.80,col="red")
plot(sft$fitIndices[,1], sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
}
softPower = 16 # (Read WGCNA tutorial to learn how to pick your power)
rankExpr = rank(colMeans(warner_WGNCA_data))
rankExpr = rank(colMeans(fischer_WGNCA_data))
rankConn = rank(softConnectivity((fischer_WGNCA_data),type="signed",power=softPower))
rankConn = rank(softConnectivity((fischer_WGNCA_data),type="signed",power=softPower))
enableWGCNAThreads()
library(flashClust)
adjacency = adjacency((fischer_WGNCA_data),power=softPower,type="signed");
diag(adjacency)=0
Degree <- rowSums(adjacency)
Degree=Degree/max(Degree); gc()
dissTOM = 1-TOMsimilarity(adjacency, TOMType="signed")
dissTOM = 1-TOMsimilarity(adjacency, TOMType="signed")
geneTree = flashClust(as.dist(dissTOM), method="average")
mColor=NULL
for (ds in 0:3){
tree = cutreeHybrid(dendro = geneTree, pamStage=F, minClusterSize = (30-3*ds), deepSplit = ds, distM = dissTOM)
mColor=cbind(mColor,labels2colors(tree$labels)); }
plotDendroAndColors(geneTree, mColor, paste("dpSplt =",0:3), main = "",dendroLabels=FALSE);
